// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // The env var will be replaced when the prismaclient is used. That is, the env var needs to be available when USING the client, not when generating the client.
  // The env vars also needs to be available when using the other prisma cli commands (I.E all the commands except generate)
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Venue {
  uuid           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String       @unique
  startTime      DateTime
  settings       Json
  virtualSpace   VirtualSpace @relation(fields: [virtualSpaceId], references: [uuid])
  virtualSpaceId String       @unique @db.Uuid
  owner          User         @relation(fields: [ownerId], references: [uuid], onDelete: Cascade)
  ownerId        String       @db.Uuid
  allowedUsers   User[]       @relation("allowedUsers")
  cameras        Camera[]
}

model VirtualSpace {
  uuid     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  settings Json
  venue    Venue?
}

model Camera {
  uuid    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String
  venue   Venue  @relation(fields: [venueId], references: [uuid], onDelete: Cascade)
  venueId String @db.Uuid

  settings Json

  @@unique([name, venueId]) // We allow duplicate camera names as long as they are at different venues
}

// model Role {
//   id    Int    @id @default(autoincrement())
//   // uuid String @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   role  String @unique
//   users User[]
// }
enum Role {
  gunnar
  superadmin
  admin
  moderator
  user
  guest
}

model User {
  uuid          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  updatedAt     DateTime @updatedAt
  username      String   @unique
  password      String
  // role      Role?    @relation(fields: [roleId], references: [id])
  // roleId    Int?
  role          Role     @default(user)
  ownedVenues   Venue[]
  allowedVenues Venue[]  @relation("allowedUsers")
}
