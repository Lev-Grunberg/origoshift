// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider    = "zod-prisma"
  output      = "../src/zod"
  modelSuffix = "SchemaGenerated"
}

datasource db {
  provider = "postgresql"
  // The env var will be replaced when the prismaclient is used. That is, the env var needs to be available when USING the client, not when generating the client.
  // The env vars also needs to be available when using the other prisma cli commands (I.E all the commands except generate)
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

enum Role {
  gunnar
  superadmin
  admin
  moderator
  sender
  user
  guest
}

enum Visibility {
  private
  unlisted
  public
}

model User {
  userId        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid ///@zod.uuid()
  updatedAt     DateTime @updatedAt
  username      String   @unique
  password      String
  role          Role     @default(user)
  ownedVenues   Venue[]  @relation("usersOwningVenues")
  allowedVenues Venue[]  @relation("usersAllowedInVenues")
  bannedVenues  Venue[]  @relation("usersBannedFromVenues")
}

model Venue {
  venueId               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid ///@zod.uuid()
  name                  String        @unique
  doorsOpeningTime      DateTime?
  doorsAutoOpen         Boolean       @default(false)
  doorsManuallyOpened   Boolean       @default(false)
  streamStartTime       DateTime?
  streamAutoStart       Boolean       @default(false)
  streamManuallyStarted Boolean       @default(false)
  extraSettings         Json?
  virtualSpace          VirtualSpace?
  visibility            Visibility    @default(public)
  // allowGuests      Boolean       @default(true)
  // publiclyListed   Boolean       @default(true)
  // owner            User          @relation(fields: [ownerId], references: [userId], onDelete: Cascade)
  // ownerId          String        @db.Uuid
  owners                User[]        @relation("usersOwningVenues")
  whitelistedUsers      User[]        @relation("usersAllowedInVenues")
  blackListedUsers      User[]        @relation("usersBannedFromVenues")
  cameras               Camera[]

  // @@unique([ownerId, venueId])
}

model VirtualSpace {
  vrId                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid ///@zod.uuid()
  extraSettings         Json?
  venue                 Venue                @relation(fields: [ownerVenueId], references: [venueId], onDelete: Cascade)
  ownerVenueId          String               @unique @db.Uuid ///@zod.uuid()
  virtualSpace3DModel   VirtualSpace3DModel? @relation(fields: [virtualSpace3DModelId], references: [modelId])
  virtualSpace3DModelId String?              @db.Uuid ///@zod.uuid()
}

model VirtualSpace3DModel {
  modelId       String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid ///@zod.uuid()
  modelUrl      String
  navmeshUrl    String
  public        Boolean        @default(false)
  scale         Float
  virtualSpaces VirtualSpace[]
}

model Camera {
  cameraId String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid ///@zod.uuid()
  name     String
  venue    Venue   @relation(fields: [venueId], references: [venueId], onDelete: Cascade)
  venueId  String  @db.Uuid ///@zod.uuid()
  senderId String? @db.Uuid ///@zod.uuid()
  settings Json

  @@unique([name, venueId]) // We allow duplicate camera names as long as they are at different venues
  @@unique([senderId, venueId]) // We allow a sender to be associated with different cameras in different venues
}
